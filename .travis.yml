language: generic

services:
  - docker

before_install:
  - docker build -t dotoryeee/test-submit-server -f ./flask-submit-server/Dockerfile ./flask-submit-server

script:
  - docker run -e CI=true dotoryeee/test-submit-server python3 test.py

after_success:
  - docker build -t dotoryeee/flask-submit-server ./flask-submit-server
  - docker build -t dotoryeee/flask-result-server ./flask-result-server
  - docker build -t dotoryeee/nginx ./nginx

  - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_ID" --password-stdin

  - docker push dotoryeee/flask-submit-server
  - docker push dotoryeee/flask-result-server
  - docker push dotoryeee/nginx

before_deploy:
  - zip -r myapp.zip ./* #CI 완료 후 모든 파일을 myapp.zip로 압축
  - mkdir -p deploy  # deploy 디렉터리 생성
  - cp */*.css */*.js ./deploy #정적컨테츠 s3 호스팅을 위한 이동
  - mv myapp.zip ./deploy #myapp.zip를 deploy 디렉터리로 이동

deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket: dotoryeee-s3
    region: ap-northeast-2
    skip_cleanup: true #압축파일 삭제 방지
    local_dir: deploy #deploy 디렉터리의 파일을 S3에 전송
    wait-until-deployed: true
    on:
      branch: main
  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_ACCESS_KEY
    bucket: dotoryeee-s3
    key: myapp.zip
    bundle_type: zip
    application: talentpool
    deployment_group: main-deploy
    region: ap-northeast-2
    wait-until-deployed: true #AWS에 파일 전달 이후에도 에러 확인 가능
    on:
      branch: main